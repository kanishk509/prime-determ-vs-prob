{"version":3,"sources":["deterministicTest.jsx","fermatTest.jsx","bigPrimes.js","carmichaelNums.js","App.jsx","index.js"],"names":["DeterministicPrimalityTest","props","useState","isProcessing","setIsProcessing","factors","setFactors","timeTaken","setTimeTaken","num","setNum","useEffect","timerStart","performance","now","computedFactors","n","BigInt","i","findFactor","timerEnd","toString","class","toFixed","modularExp","base","exp","p","x","res","Number","FermatPrimalityTest","setBase","iterations","computedBase","iter","checkedBases","Set","add","randBase","has","Math","floor","random","expRemainder","fermatCheck","pow","bigPrimes","biggerPrimes","carmichaelNums","App","formNum","setFormNum","confidence","setConf","setIter","handleSubmit","replace","ceil","log2","href","target","rel","type","value","onChange","e","onKeyPress","charCode","Button","variant","size","onClick","length","p1","p2","style","width","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96ae400d.chunk.js","sourcesContent":["/* globals BigInt */\n\nimport React, { useState, useEffect } from \"react\";\n\nconst findFactor = (n) => {\n  n = BigInt(n);\n  for (let i = BigInt(2); i * i <= n; i++) {\n    if (n % i === 0n) return [i, n / i];\n  }\n  return [1, n];\n};\n\nconst DeterministicPrimalityTest = (props) => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [factors, setFactors] = useState([1, 0]);\n  const [timeTaken, setTimeTaken] = useState(0);\n  const [num, setNum] = useState(2);\n\n  useEffect(() => {\n    setIsProcessing(true);\n  }, [props.num]);\n\n  useEffect(() => {\n    if (isProcessing) {\n      setNum(props.num);\n\n      let timerStart = performance.now();\n      let computedFactors = findFactor(props.num);\n      let timerEnd = performance.now();\n\n      setFactors(computedFactors);\n      setTimeTaken(timerEnd - timerStart);\n      setIsProcessing(false);\n    }\n  }, [isProcessing]);\n\n  return (\n    <div>\n      <h4>Deterministic Check</h4>\n      {isProcessing ? (\n        <div>working...</div>\n      ) : (\n        <div>\n          {num.toString()} is...\n          <br />\n          {factors[0] > 1 ? \"COMPOSITE\" : \"PRIME\"}\n          {factors[0] > 1 ? (\n            <p class=\"my-2\">\n              Factors found: {factors[0].toString()} x {factors[1].toString()}\n            </p>\n          ) : (\n            <p class=\"my-2\">Could not factorize.</p>\n          )}\n          Time taken: {timeTaken.toFixed(3)} ms\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DeterministicPrimalityTest;\n","/* globals BigInt */\n\nimport React, { useState, useEffect } from \"react\";\n\n// calculate x^y % p efficiently\nconst modularExp = (base, exp, p) => {\n  let x = BigInt(base);\n  p = BigInt(p);\n  x = x % p;\n  let res = BigInt(1);\n\n  while (exp > 0n) {\n    if ((exp & 1n) === 1n) {\n      res = (res * x) % p;\n    }\n\n    x = (x * x) % p;\n    exp = exp >> 1n;\n  }\n\n  return Number(res);\n};\n\nconst fermatCheck = (n, iter) => {\n  let checkedBases = new Set();\n  checkedBases.add(1);\n\n  while (iter--) {\n    let randBase = 1;\n    while (checkedBases.has(randBase)) {\n      randBase = BigInt(Math.floor(Math.random())) * n;\n      if (randBase < 2n) randBase = 2n;\n    }\n    let expRemainder = modularExp(randBase, n - 1n, n);\n    if (expRemainder !== 1) return [randBase, expRemainder];\n  }\n\n  return [1, 0];\n};\n\nconst FermatPrimalityTest = (props) => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [num, setNum] = useState(2);\n  const [base, setBase] = useState([1, 0]);\n  const [timeTaken, setTimeTaken] = useState(0);\n\n  useEffect(() => {\n    setIsProcessing(true);\n  }, [props.num, props.iterations]);\n\n  useEffect(() => {\n    if (isProcessing) {\n      setNum(props.num);\n\n      let timerStart = performance.now();\n      let computedBase = fermatCheck(props.num, props.iterations);\n      let timerEnd = performance.now();\n\n      setBase(computedBase);\n      setTimeTaken(timerEnd - timerStart);\n      setIsProcessing(false);\n    }\n  }, [isProcessing]);\n\n  return (\n    <div>\n      <h4>Fermat's Check (Probabilistic)</h4>\n      {isProcessing ? (\n        <div>working...</div>\n      ) : (\n        <div>\n          {num.toString()} is...\n          <br />\n          {base[0] > 1 ? \"COMPOSITE\" : \"PRIME\"} <br />\n          Iterations: {props.iterations}, Confidence:{\" \"}\n          {base[0] > 1 ? 100 : 100 * (1 - Math.pow(2, -1 * props.iterations))} %\n          {base[0] > 1 ? (\n            <p class=\"my-2\">\n              {base[0].toString()}\n              <sup>{props.num.toString()}-1</sup> â‰¡ {base[1].toString()} (mod{\" \"}\n              {props.num.toString()})\n            </p>\n          ) : (\n            <br />\n          )}\n          <div class=\"my-2\">Time taken: {timeTaken.toFixed(3)} ms</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FermatPrimalityTest;\n","const bigPrimes = [\n  5109463,\n  5109479,\n  5109491,\n  5109497,\n  5109509,\n  5109529,\n  5109541,\n  5109547,\n  6345803,\n  6345821,\n  6345827,\n  6345839,\n  6345851,\n  6345853,\n  6345877,\n  6345883,\n  7580999,\n  7581001,\n  7581017,\n  7581037,\n  7581043,\n  7581047,\n  7581061,\n  7581073,\n  15485557,\n  15485567,\n  15485581,\n  15485609,\n  15485611,\n  15485621,\n  15485651,\n  15485653,\n  12389681,\n  12389687,\n  12389693,\n  12389723,\n  12389737,\n  12389747,\n  12389759,\n  12389761,\n  10505291,\n  10505317,\n  10505351,\n  10505353,\n  10505377,\n  10505387,\n  10505401,\n  10505413,\n];\n\nconst biggerPrimes = [\n  142345126452469,\n  142345126452479,\n  142345126452493,\n  213458742659189,\n  213458742659231,\n  213458742659233,\n  312545126975687,\n  312545126975693,\n  312545126975701,\n  412374512589973,\n  412374512590003,\n  412374512590037,\n  541234512987799,\n  541234512987869,\n  541234512987893,\n  741245236587451,\n  741245236587677,\n  741245236587683,\n];\n\nexport { bigPrimes, biggerPrimes };\n","const carmichaelNums = [\n  642708001,\n  652969351,\n  744866305,\n  745864945,\n  836515681,\n  839275921,\n];\nexport default carmichaelNums;\n","/* globals BigInt */\n\nimport React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport DeterministicPrimalityTest from \"./deterministicTest\";\nimport FermatPrimalityTest from \"./fermatTest\";\nimport { bigPrimes, biggerPrimes } from \"./bigPrimes\";\nimport carmichaelNums from \"./carmichaelNums\";\n\nconst App = () => {\n  const [num, setNum] = useState(BigInt(\"115297905820819\"));\n  const [formNum, setFormNum] = useState(\"115297905820819\");\n  const [confidence, setConf] = useState(99.9);\n  const [iter, setIter] = useState(4);\n\n  const handleSubmit = () => {\n    setNum(BigInt(formNum.toString().replace(/,/g, \"\")));\n    setIter(Math.ceil(Math.log2(100 / (100 - confidence))));\n  };\n\n  const handleTryPrime = () => {\n    setFormNum(biggerPrimes[Math.floor(Math.random() * biggerPrimes.length)]);\n  };\n\n  const handleTryComposite = () => {\n    let p1 = bigPrimes[Math.floor(Math.random() * bigPrimes.length)];\n    let p2 = bigPrimes[Math.floor(Math.random() * bigPrimes.length)];\n    setFormNum(p1 * p2);\n  };\n\n  const handleTryCarmichael = () => {\n    setFormNum(\n      carmichaelNums[Math.floor(Math.random() * carmichaelNums.length)]\n    );\n  };\n\n  return (\n    <div class=\"text-center\">\n      <h2>Primality test</h2>\n      <h3>Deterministic vs Probabilistic algorithms</h3>\n      <a\n        href=\"https://github.com/kanishk509/prime-determ-vs-prob\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        (view source code)\n      </a>\n      <div class=\"my-4\">\n        <div class=\"my-2\">\n          Number:{\" \"}\n          <input\n            type=\"text\"\n            value={formNum}\n            onChange={(e) => setFormNum(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.charCode === 13) handleSubmit();\n            }}\n          />\n        </div>\n        <div class=\"my-2\">\n          <Button variant=\"secondary\" size=\"sm\" onClick={handleTryPrime}>\n            Try a big prime\n          </Button>{\" \"}\n          <Button variant=\"secondary\" size=\"sm\" onClick={handleTryComposite}>\n            Try a non-prime with big prime factors\n          </Button>{\" \"}\n          <Button variant=\"secondary\" size=\"sm\" onClick={handleTryCarmichael}>\n            Try a Carmichael number (see note 4)\n          </Button>\n        </div>\n        <div class=\"my-2\">\n          Min. Confidence % (for probabilistic algo.):{\" \"}\n          <input\n            type=\"text\"\n            value={confidence}\n            style={{ width: \"10%\" }}\n            onChange={(e) => setConf(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.charCode === 13) handleSubmit();\n            }}\n          />{\" \"}\n          %\n        </div>\n        <Button variant=\"primary\" size=\"sm\" onClick={handleSubmit}>\n          Is this a prime?\n        </Button>\n      </div>\n      <div class=\"container-fluid row\">\n        <div class=\"col\">\n          <DeterministicPrimalityTest num={num} />\n        </div>\n        <div class=\"col\">\n          <FermatPrimalityTest num={num} iterations={iter} />\n        </div>\n      </div>\n      <br />\n      <p class=\"text-left\">\n        <b class=\"ml-4\">Notes.</b>\n        <ol>\n          <li>\n            The deterministic test will finish very fast if the given number has\n            even one very small factor. For example 14266523201 (= 7 *\n            2038074743).\n            <br />\n            In such cases, the perfomance advantage of the probabilistic\n            algorithm is not apparent.\n          </li>\n          <li>\n            The performance advantage of the probabilistic algorithm over the\n            deterministic one can be clearly seen when the number is a big prime\n            or a product of two or more big primes. For example 115297905820819\n            (= 7445521 * 15485539).\n          </li>\n          <li>\n            Fermat's primality test is based on{\" \"}\n            <a\n              href=\"https://en.wikipedia.org/wiki/Fermat%27s_little_theorem\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Fermat's little theorem\n            </a>\n            . If it finds some suitable base A (1 &lt; A &lt; N-1) such that A\n            <sup>N-1</sup> â‰¢ 1 (mod N), then it can declare with 100% confidence\n            that n is composite.\n            <br />\n            However, if it doesn't find any such base, it declares N as a prime,\n            but with a margin of error. The probability of a false positive\n            declaration as prime is bounded by 2<sup>-K</sup> (assuming N is not\n            a Carmichael number) where K is the number of iterations of the\n            algorithm.\n          </li>\n          <li>\n            <a\n              href=\"https://en.wikipedia.org/wiki/Carmichael_number\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Carmichael numbers\n            </a>{\" \"}\n            are composite numbers with very high probability of being\n            misclassified as a prime by the Fermat's test. (This is because, for\n            a Carmichael number C, all values of A with gcd(A, C) = 1 also\n            satisfy A<sup>C-1</sup> â‰¡ 1 (mod C)).\n            <br />\n            This is one of the biggest flaws of the Fermat's primality test and\n            the reason why in practice, more robust probabilistic tests (like\n            the{\" \"}\n            <a\n              href=\"https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Millerâ€“Rabin test)\n            </a>{\" \"}\n            are used.\n          </li>\n        </ol>\n      </p>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}